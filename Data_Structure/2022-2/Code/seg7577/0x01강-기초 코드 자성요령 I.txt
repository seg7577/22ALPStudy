#include <iostream>
#include <string>
using namespace std;
//문제1
//N 이하의 자연수 중에서 3의 배수이거나 5의 배수인 수를 모두 합한 값을 반환하는 함수
//func1(int N)을 작성하라.N은 10만 이하의 자연수이다.
//for문을 단순하게 N까지 돌면서 조건만 비교 하기하기 때문에 시간복잡도는 O(N)이다
int num = 0;
int func1(int N)
{
	for (int i = 1; i <= N; i++)
	{
		if (i % 3 == 0 || i % 5 == 0)
			num += i;
	}
	return num;
}

//-------------------------------------------------------------------------------------------

//문제2
//주어진 길이 N의 int 배열 arr에서 합이 100인 서로 다른 위치의 두 원소가 존재하면
//1을, 존재하지 않으면 0을 반환하는 함수 func2(int arr[],int N)을 작성하라.
//arr의 각 수는 0 이상 100 이하이고 N은 1000 이하다.
//시간 복잡도 O(N^2)
int func2(int arr[], int N)
{
	for (int i = 0; i < N; i++)
	{
		for (int j = i + 1; j < N; j++)
			if (arr[i] + arr[j] == 100)
				return 1;
	}
}

//-------------------------------------------------------------------------------------------

//문제3
//N이 제곱수이면 1을 반환하고 제곱수가 아니면 0을 반환하는 
// 함수 func3(int N)을 작성하라.N은 10억 이하의 자연수이다.
//시간 복잡도는 i * i가 N까지 이므로 시간 복잡도 O(루트N)이다
int func3(int N)
{
	for (int i = 0; i < (N / 2); i++)
		if (i * i == N)
			return 1;
	return 0;
}
/*
* for(int i = 0; i * i <= N; i++) 바킹독이 짠 for문 최종값
*/

//-------------------------------------------------------------------------------------------

//문제4
//N이하의 수 중에서 가장 큰 2의 거듭제곱수를 반환하는 함수 func4(int N)을
//작성하라. N은 10억 이하의 자연수이다.
//시간 복잡도는(lg N)이다.
int func4(int N)
{
	int max = 1;
	while (2 * max <= N)
		max *= 2;
	return max;
}

//-------------------------------------------------------------------------------------------
정리
/*
공간 복잡도는 시간 복잡도에 비해 크게 중요 X
int는 약 21억까지 표현이 가능하다.
float는 상대 오차 10^-6까지 안전하고 double는 10^-15까지 안전하다
float이 double을 쓰는 것이 메모리 절약에 효과가 있지만 되도록이면 걍 double을 사용한다.
중요함
1.실수의 저장,연산 과정에서 반드시 오차가 발생할 수 밖에 없다.
2.double에 long long 범위의 정수를 함부로 담으면 안된다. 오차가 섞인 값이 저장이 될 수 있다.
3.실수를 비교할 때는 등호를 사용하면 안된다.
*/
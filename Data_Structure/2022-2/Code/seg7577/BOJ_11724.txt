#include <iostream>
#include <bits/stdc++.h>
#include <vector>
#include <queue>

using namespace std;
bool vis[100005];
int main()
{
	int cnt = 0;
	int n, m; //정점의 개수와 간선의 개수
	int u, v; //간선의 양 끝점 u v

	vector<int> adj[100005];

	queue<int> Q;

	cin >> n >> m;

	for (int i = 0; i < m; i++)
	{
		cin >> u >> v;
		//간선을 기준으로 양 끝점 u와 v를 입력 받음

 		adj[u].push_back(v);
		adj[v].push_back(u);
		//문제에서 방향 없는 그래프라고 했으므로 무방향 그래프이므로 adj[u], adj[v]에 각각 push_back 함
	}
	
	for (int i = 1; i <= n; i++)//각 정점을 돌며 연결을 확인해야 하므로 정점의 개수만큼 반복
	{
		if (vis[i])//방문한 곳이면 true
		{
			cnt++;//연결이 끊어진 경우 cnt
			continue; //방문한 경우 넘어간다
			
		}

		Q.push(i);//32번째 if문에서 걸러지지 않았으므로 방문하지 않았으니 i와 연결된 정점들을 체크해보기 위해 Q에 push
		vis[i] = true; //방문한 곳을 또 방문하지 않기 위해 표시를 남김


		while (!Q.empty()) //연결된 모든 지점을 방문한다.
		{
			int cur = Q.front();
			Q.pop();
			

			for (int nxt : adj[cur])//nxt = adj배열의 내부 값을 가지고 반복 횟수는 adj[cur]의 요소 개수만큼 반복함
			{
				if (vis[nxt])	continue; //이미 방문한 경우 continue 이 말은 즉, 연결이 되었는 지 확인한 경우를 말한다
				Q.push(nxt);//방문하지 않은 곳이므로 Q에 넣고 43번째의 while문을 수행한다.
				vis[nxt] = true;//방문한 곳을 또 방문하지 않기 위해 표시를 남김
			}	
		}
	}
	cout << n - cnt; //정점의 개수에서 continue한 횟수를 빼면 연결이 끊긴 횟수를 알 수 있다.

	return 0;
}
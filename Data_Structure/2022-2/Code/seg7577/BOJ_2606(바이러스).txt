#include <iostream>
#include <vector>
#include <queue>

using namespace std;
//이 문제에서 방향과 상관없이 연결된 모든 것은 감염된다. 이는 무방향 그래프를 말해준다.

bool vis1[1005]; //방문여부를 확인하기 위한 bool형
int main()
{
	int n; //컴퓨터의 개수
	int node1, node2, edge; //정점1과 정점2, 쌍의 개수를 의미함
	int cnt = 0; //바이러스에 감염된 컴퓨터의 수 = 총 컴퓨터의 수 - 감염되지 않은 컴퓨터의 수
	cin >> n >> edge;

	vector<int> V1[105];
	queue<int> Q1;
	for (int i = 0; i < edge; i++)
	{
		cin >> node1 >> node2;
		V1[node1].push_back(node2);
		V1[node2].push_back(node1);
		//무방향 그래프이므로 둘다 push_back해줌
	}

	Q1.push(1);//시작할 정점을 큐에 넣음
	vis1[1] = 1; //방문표시를 남겨줌.

	while (!Q1.empty())
	{
		int cur = Q1.front();//정점을 꺼내어 그 정점과 연결된 모든 정점들을 찾기 위함
		Q1.pop();
		for (auto nxt : V1[cur])
		{
			if (vis1[nxt] == 1)	continue; //이미 방문했다면 continue하는 것
			Q1.push(nxt);//인접 리스트 안에 있는 숫자 중에 방문하지 않은 숫자이므로 방문하여 nxt와 연결 되어 있는 컴퓨터들을 감염
			vis1[nxt] = 1; //방문했으므로 다시 방문하지 않게 감염표시를 남겨줌 

		}
	}

	for (int i = 1; i <= n; i++)
	{
		if (vis1[i] == 0)	cnt++; //감염되지 않은 컴퓨터의 수를 파악하기 위함
	}
	cout << n - cnt - 1;

}
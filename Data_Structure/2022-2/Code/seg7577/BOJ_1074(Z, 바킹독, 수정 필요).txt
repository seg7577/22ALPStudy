//BOJ - 1074 Z 바킹독
#include <iostream>
#include<algorithm>

using namespace std;

int func(int n, int r, int c)
{
	if (n == 0) return 0; //Base Condition
	int half = 1 << (n - 1); //비트 연산자
	if (r < half && c < half) return func(n - 1, r, c); //1번 사각형인 경우
	if (r < half && c >= half) return half * half + func(n - 1, r, c - half); //2번 사각형인 경우
	if (r >= half && c < half) return 2 * half * half + func(n - 1, r - half, c);//3번 사각형인 경우
	return 3 * half * half + func(n - 1, r - half, c - half);
}

int main()
{
	ios::sync_with_stdio(0);
	cin.tie(0);

	int n, r, c;
	cin >> n >> r >> c;
	cout << func(n, r, c);
}
 
//예시 1번 2 1 3
/*
* 1. 3번 사각형 (R, C) = (3, 1)
* half 1 << (2 - 1) ====>> 1을 1만큼 왼쪽으로 비트 이동 시키면 0001에서 0010으로 바뀐다. 그러므로 half = 2이다.
  if(3 >= 2 && 1 < 2)
  return 8 + func(1, 1, 1) 여기서 func의 호출은 타고 들어가는 느낌이다. 여기서 호출한 func의 리턴 값 + 8이 답인 것이다.
		 8 + 3(코드38번째 줄의 리턴 값) = 11이므로 최종적으로 11을 return 해준다.

  2. 4번 사각형 (R, C) = (1, 1)
  half 1 << (1 - 1) ====>> 1을 0만큼 왼쪽으로 비트 이동은 암것도 없으므로 half = 1이다
  if(1 >= 1 && 1 >= 1)
  return 3 * half * half + func(0, 0, 0) 3 + 0(코드40번째 줄의 리턴 값)

  3.BaseCondition 조건문이 참이 되므로 return 0; 0의 값은 38번째 줄로 감.
*/
#include<iostream>
#include<bits/stdc++.h>
#include<string>
#include<queue>

#define X first
#define Y second

using namespace std;

int board[1005][1005];
int vis[1005][1005];
int dx[4] = { 1, 0, -1, 0 };
int dy[4] = { 0, 1, 0, -1 };

int main()
{
	int m, n, num = 0;
	cin >> m >> n;
	queue<pair<int, int>> Q;
	for (int i = 0; i < m; i++) //입력
		for (int j = 0; j < n; j++)
		{
			cin >> board[i][j];
			
			if (board[i][j] == 1)//익은 토마토인지 판별
			{
				Q.push({ i, j }); //익은 토마토 있으면 큐에 넣기
				vis[i][j] = 0; //익은 애들은 0
			}
				 
			else if (board[i][j] == 0)
				vis[i][j] = -1;
		}

	while (!Q.empty())
	{
		pair<int, int> cur = Q.front(); 
		//토마토가 위치한 곳을 cur에 넣어 상하좌우로 탐색
		//여기서 front의 반환값은 입력을 기준으로 첫번째로 익은 애들을 좌표에 넣음 그 다음 2번째... 끝까지 진행..

		Q.pop();//메모리 초과, 시간 초과가 날 수 있기 때문에 빠딱빠딱 빼줘야 됨
		
		for (int dir = 0; dir < 4; dir++)//상하좌우 탐색을 위해 반복
		{
			int nx = cur.X + dx[dir];
			int ny = cur.Y + dy[dir];

			if (nx < 0 || nx >= m || ny < 0 || ny >= n)	continue; //범위에서 벗어나는 겨우 continue
			if (vis[nx][ny] >= 0)	continue; //이미 방문한 경우이거나 토마토가 익어 있지 않은 경우

			vis[nx][ny] = vis[cur.X][cur.Y] + 1; //좌표값에 해당 좌표에 있는 값 +1을 하여 누적 시켜줌. ==> 날짜 증가

			Q.push({ nx, ny });
		}
	}
	
	for (int i = 0; i < m; i++)//이중 for문으 사용하여 -1이 하나라도 있는 지 확인하고, 좌표 값 가장 큰값을 찾는 것이다.
	{
		for (int j = 0; j < n; j++)
		{
			if (vis[i][j] == -1) //익지 않은 토마토가 아직 존재한다는 소리이므로 조건대로 -1출력
			{
				cout << -1;
				return 0;
			}
			
			num = max(num, vis[i][j]);
		}
	}
	cout << num; //아직 익지 않은 토마토가 없으므로 최소 일수 출력.

	return 0;
}
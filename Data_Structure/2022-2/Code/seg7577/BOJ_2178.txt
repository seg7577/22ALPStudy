#include <iostream>
#include <queue>
#include <string>
#include <algorithm>
#include <bits/stdc++.h>
#define X first
#define Y second
using namespace std;

string str_board[105];
int bord[105][105];
int vis[105][105];
int dx[4] = { 1, 0, -1, 0 };
int dy[4] = { 0, 1, 0, -1 };
int n, m;

int main()
{
	ios::sync_with_stdio(0);
	cin.tie(0);

	cin >> n >> m;
	for (int i = 0; i < n; i++) //board 입력
		cin >> str_board[i];

	for (int i = 0; i < n; i++)
		fill(vis[i], vis[i] + m, -1);//값으로 특점 범위(first, last , val)를 채우는 역할을 하는 함수
	queue<pair<int, int>> Q;
	Q.push({ 0, 0 });
	vis[0][0] = 0;
	//무조건 시작점은 좌상단 0, 0임
	while (!Q.empty())
	{
		auto cur = Q.front();
		//auto 키워드는 선언한 변수나 람다식의 타입을 컴파일러에게 추론하도록 맡김
		//약간 카멜레온 느낌 알아서 바뀜

		Q.pop();
		for (int dir = 0; dir < 4; dir++)
		{
			int nx = cur.X + dx[dir];
			int ny = cur.Y + dy[dir];
			//현재 위치에서 와리가리 하려고
			if (nx < 0 || ny < 0 || nx >= n || ny >= m)	continue;
			//nx, ny가 범위를 벗어날 경우 continue함

			if (vis[nx][ny] >= 0 || str_board[nx][ny] != '1')	continue;
			//vis나 str_board에 1이나 시작점부터의 거리가 표시 되있으면 continue함

			vis[nx][ny] = vis[cur.X][cur.Y] + 1;
			//현재의 위치 = (현재의 상하좌우 기준점)보다 한칸 더 앞에 있으므로 +1을 하여 저장함.

			Q.push({ nx, ny });
		}
	}
	cout << vis[n-1][m-1] + 1;
	//문제에서는 (0,0)이 시작이 아니라 (1, 1)을 시작이라 하기 때문에 [-1]을 해줘야 함
	//+1을 한 이유는 0,0을 0으로 잡고 시작했기 때문에 거리를 계산할때 첫번째 칸을 1이 아닌 0으로 잡고 시작하기 때문에 +1해서 표현함.

	return 0;
}
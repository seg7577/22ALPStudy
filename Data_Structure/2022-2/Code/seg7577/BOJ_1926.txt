#include <bits/stdc++.h>
#include <iostream>
#include <queue>

#define X first
#define Y second
using namespace std;



int n, m;
int area = 0, mx = 0, num = 0;
int board[502][502] = {};
bool vis[502][502];
int dx[4] = { 1, 0, -1, 0 };
int dy[4] = { 0, 1, 0, -1 };

int main()
{
	ios::sync_with_stdio(0);
	cin.tie(0);

	cin >> n >> m;
	for (int i = 0; i < n; i++)
		for (int j = 0; j < m; j++)
			cin >> board[i][j];

	for (int i = 0; i < n; i++)
	{
		for (int j = 0; j < m; j++)
		{
			if (board[i][j] == 0 || vis[i][j])	continue;

			num++; //그림의 개수 증가
			queue<pair<int, int>> Q;
			Q.push({i , j});//새로운 그림의 시작점 표기라고 봐도 됨
			vis[i][j] = 1; //while 들어가기 전 시작점 표시 크게 보면 다른 그림의 새로운 시작점 표시
			area = 0;
			while (!Q.empty())
			{
				area++; //그림의 넓이 증가

				pair<int, int> cur = Q.front();
				Q.pop();

				for (int dir = 0; dir < 4; dir++) //상하좌우로 이어지는 그림이 있나 확인하기 위해 반복
				{
					int nx = dx[dir] + cur.X;
					int ny = dy[dir] + cur.Y;
					
					if (nx < 0 || ny < 0 || nx >= n || ny >= m)	continue;
					if (vis[nx][ny] || board[nx][ny] != 1)	continue;

					vis[nx][ny] = 1;
					Q.push({ nx, ny });
				}
			}
			mx = max(area, mx);
		}
	}
	cout << num << '\n' << mx;
	return 0;
}
#include <iostream>
#include <bits/stdc++.h>
#include <vector>
#include <queue>

using namespace std;

int board[1005][1005];
bool vis1[1005]; //DFS
bool vis2[1005]; //BFS

int main()
{
	int n, m, v; //정점의 개수, 간선의 개수, 탐색을 시작할 정점의 번호
	int V, node; //정점1, 정점2
	int cnt = 0;
	
	cin >> n >> m >> v; 

	vector<int> adj_v[1005]; //BFS를 돌릴 큐
	vector<int> adj_q[1005];  //DFS를 돌릴 큐

	queue<int> Q1;//DFS
	queue<int> Q2;//BFS

	for (int i = 0; i < m; i++) //문제에서 간선의 방향은 양방향이라고 주어짐.
	{
		cin >> V >> node;

		adj_v[V].push_back(node);
		adj_v[node].push_back(V);
		//무방향 그래프의 BFS를 위함.

		adj_q[V].push_back(node);
		adj_q[node].push_back(V);
		//무방향 그래프의 DFS를 위함.
	}


	Q1.push(v);//시작 정점을 큐에 넣음
	vis1[v] = 1; //방문했다는 표시를 남겨줌

	while (!Q1.empty()) //DFS 시작
	{
		int num = 100000; //DFS에서 가장 번호가 작은 노드를 찾기 위해 사용될 변수

		int cur = Q1.front();
		cout << cur << ' ';
		Q1.pop();
		
		for (int nxt : adj_q[cur])//인접한 노드 중에 가장 작은 노드를 방문(단순하게 숫자가 작은 노드를 말함)
		{
			if (vis1[nxt])	continue; //이미 방문한 노드인 경우 continue
			num = min(num, nxt); //가장 작은 값을 찾음
		}
		if (num >= 100000)	continue; //예외처리하라고 문구 뜨길래 넣어줌
		Q1.push(num); //가장 작은 노드 방문을 위해 큐에 값을 넣음
		vis1[num] = 1;//방문했다는 표시를 남김
	}
	
	cout << '\n';

	Q2.push(v);//시작 정점을 큐에 넣음
	vis2[v] = 1; //방문했다는 표시를 남겨줌

	while (!Q2.empty()) //BFS 시작
	{
		int num = 100000; //가장 작은 녿

		int cur = Q2.front();
		cout << cur << ' ';
		Q2.pop();

		sort(adj_v[cur].begin(), adj_v[cur].end()); //동일한 거리에서 낮은 번호의 노드부터 출력해야 하므로 정렬
		
		for (int nxt : adj_v[cur])//거리를 기반으로 같은 거리에 존재하는 것들 먼저 출력. begin
		{
			if (vis2[nxt])	continue; //이미 방문한 노드인 경우 continue
			
			Q2.push(nxt);//바로 인접한 노드(현재 노드를 기준으로 거리 = 1)를 큐에 넣는다
			vis2[nxt] = true;
		}
	}

	return 0;
}